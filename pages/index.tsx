import type { NextPage } from 'next';
import Head from 'next/head';
import Image from 'next/image';
import { useEffect, useState } from 'react';
import styles from '../styles/Home.module.css';

// commit to kick off build :TODO delete

const Home: NextPage = () => {
  const [multiplicationNumbersRange, setMultiplicationNumbersRange] = useState(
    new Array(11).fill('').map((a, i) => i)
  );
  const [multiplicationMin, setMultiplicationMin] = useState(0);
  const [multiplicationMax, setMultiplicationMax] = useState(10);

  const onlyNumber = (event: React.ChangeEvent<HTMLInputElement>) => {
    if (event.target.value === '' && !/^[0-9\b]+$/.test(event.target.value)) {
      event.target.style.backgroundColor = 'white';

      event.target.value = event.target.value.replace(/[a-zA-Z;:\/\?]/gm, '');
      return false;
    }

    return true;
  };

  const setMultiRange = () => {
    if (
      multiplicationMin >= multiplicationMax ||
      isNaN(multiplicationMin) ||
      isNaN(multiplicationMax)
    )
      return;

    console.log(
      'multiplicationMin',
      multiplicationMin,
      'multiplicationMax',
      multiplicationMax
    );
    const range: number[] = [];

    for (
      let index = multiplicationMin;
      index < multiplicationMax + 1;
      index++
    ) {
      range.push(index);
    }

    console.log('range', range);

    setMultiplicationNumbersRange(range);
  };

  const setMultiMin = (event: React.ChangeEvent<HTMLInputElement>) => {
    if (!onlyNumber(event)) {
      return;
    }

    const input = parseInt(event.target.value);

    if (input < 0) return;

    setMultiplicationMin(input);
  };

  const setMultiMax = (event: React.ChangeEvent<HTMLInputElement>) => {
    if (!onlyNumber(event)) {
      return;
    }

    const input = parseInt(event.target.value);

    if (input < 0) return;

    setMultiplicationMax(input);
  };

  useEffect(setMultiRange, [multiplicationMin, multiplicationMax]);

  const validateMultiplicationInput = (
    value: number,
    column: number,
    row: number
  ) => {
    return value === column * row;
  };

  const handleMultiplicationInput =
    (column: number, row: number) =>
    (event: React.ChangeEvent<HTMLInputElement>) => {
      if (!onlyNumber(event)) {
        return;
      }

      const input = parseInt(event.target.value);

      if (!validateMultiplicationInput(input, column, row)) {
        event.target.style.backgroundColor = 'red';

        return;
      }

      event.target.style.backgroundColor = 'green';
    };

  return (
    <div className={styles.container}>
      <Head>
        <title>Can you do the maths?</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>Do you even math? ü§∑‚Äç‚ôÇÔ∏è</h1>

        <h2>Multiplication Table</h2>
        <p>
          Number range{' '}
          <input
            className={styles.rangeInput}
            value={multiplicationMin}
            onChange={setMultiMin}
            placeholder="0"
            type="text"
            pattern="[0-9]"
            size={4}
          />{' '}
          -{' '}
          <input
            className={styles.rangeInput}
            value={multiplicationMax}
            onChange={setMultiMax}
            placeholder="0"
            type="text"
            pattern="[0-9]"
            size={4}
          />
        </p>
        <div className={styles.table}>
          <table>
            <tbody>
              {multiplicationNumbersRange.map((parentItem, index) => (
                <tr key={`parent-${parentItem}`}>
                  {parentItem !== multiplicationNumbersRange[0] && (
                    <td className={styles.multiplyTableHeader}>{parentItem}</td>
                  )}
                  {parentItem === multiplicationNumbersRange[0]
                    ? multiplicationNumbersRange.map(
                        (childItem, childIndex) => (
                          <td
                            className={styles.multiplyTableHeader}
                            key={`child-${childIndex}`}
                          >
                            {childItem}
                          </td>
                        )
                      )
                    : multiplicationNumbersRange
                        .filter((i) => i !== multiplicationNumbersRange[0])
                        .map((childItem, childIndex) => (
                          <td key={`child-${childIndex}`}>
                            <input
                              className={styles.multiplyTableInput}
                              size={5}
                              onChange={handleMultiplicationInput(
                                parentItem,
                                childItem
                              )}
                            />
                          </td>
                        ))}
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </main>
    </div>
  );
};

export default Home;
